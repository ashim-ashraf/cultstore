<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css"
      integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm"
      crossorigin="anonymous"
    />

    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.css"
      integrity="sha512-+VDbDxc9zesADd49pfvz7CgsOl2xREI/7gnzcdyA9XjuTxLXrdpuz21VVIqc5HPfZji2CypSbxx1lgD7BgBK5g=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.js"
      integrity="sha512-ZK6m9vADamSl5fxBPtXw6ho6A4TuX89HUbcfvxa2v2NYNT/7l8yFGJ3JlXyMN4hlNbz0il4k6DvqbIW5CCwqkw=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>

    <style>
    .g-height-50 {
        height: 50px;
    }

    .g-width-50 {
        width: 50px !important;
    }

    @media (min-width: 0) {
        .g-pa-30 {
            padding: 2.14286rem !important;
        }
    }

    .g-bg-secondary {
        background-color: #fafafa !important;
    }

    .u-shadow-v18 {
        box-shadow: 0 5px 10px -6px rgba(0, 0, 0, 0.15);
    }

    .g-color-gray-dark-v4 {
        color: #777 !important;
    }

    .g-font-size-12 {
        font-size: 0.85714rem !important;
    }

    .media-comment {
        margin-top: 20px
    }

    .singleImageCanvasContainer {
        overflow: hidden;
        height: 350px;
        width: 30%;
        display: inline-block;
        position: relative;
        padding-right: 0px;
        margin-right: 15px;
        border: 2px solid #dfdfdf;
        margin-bottom: 10px;
        padding: 4px;
        border-radius: .25rem;
    }

    .singleImageCanvasContainer .singleImageCanvasCloseBtn {
        position: absolute;
        right: 0;
    }

    .singleImageCanvasContainer .singleImageCanvas {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    </style>

  </head>
  <body>
    <section
      class="vh-100 bg-image"
      style="height: 100vh ;background-color: aliceblue;"
    >
      <div class="mask d-flex align-items-center h-100 gradient-custom-3">
        <div class="container h-100">
          <div
            class="row d-flex justify-content-center align-items-center h-100"
          >
            <div class="col-12 col-md-9 col-lg-7 col-xl-6">
              <div class="card" style="border-radius: 15px;">
                <div class="card-body p-5">
                  <h2 class="text-uppercase text-center mb-5">Add Product</h2>

                  <form
                    method="post"
                    id="uploadForm"
                    action="/product/addProduct"
                    enctype="multipart/form-data"
                  >

                    <div class="form-outline mb-4">
                      <label class="form-label" for="form3Example1cg">Product
                        Name</label>
                      <input
                        type="text"
                        name="name"
                        id="form3Example1cg"
                        class="form-control form-control-lg"
                        required
                      />

                    </div>

                    <div class="form-outline mb-4">
                      <label
                        class="form-label"
                        for="form3Example3cg"
                      >Description</label>
                      <input
                        type="text"
                        name="description"
                        id="form3Example3cg"
                        class="form-control form-control-lg"
                        required
                      />

                    </div>

                    <div class="form-outline mb-4">
                      <label class="form-label" for="form3Example3cg">Actual
                        Price</label>
                      <input
                        type="number"
                        name="actualprice"
                        id="form3Example3cg"
                        class="form-control form-control-lg"
                      />
                    </div>

                    <div class="form-outline mb-4">
                      <label class="form-label" for="form3Example4cg">Offer
                        Price</label>
                      <input
                        type="number"
                        name="price"
                        id="form3Example4cg"
                        class="form-control form-control-lg"
                        required
                      />

                    </div>

                    <div class="form-outline mb-4">
                      <label for="sel1" class="form-label">Chose Category:</label>
                      <select
                        class="form-select form-control form-control-lg"
                        id="sel1"
                        name="category"
                      >
                        {{#each category}}
                          <option value="{{this.name}}">{{this.name}}</option>
                        {{/each}}
                      </select>
                    </div>

                    <div class="form-outline mb-4">
                      <label class="form-label" for="form3Example4cg">Attach
                        Images</label>
                      <input
                        type="file"
                        name="photo"
                        accept="image/*"
                        class="form-control form-control-lg"
                        data-toggle="modal" data-target="#exampleModal" type="file" id="id_image"
                        multiple
                      />
                    </div>

                  

                    <div class="form-outline mb-4">
                      <label
                        class="form-label"
                        for="form3Example4cg"
                      >Quantity</label>
                      <input
                        type="number"
                        name="quantity"
                        id="form3Example4cg"
                        class="form-control form-control-lg"
                      />

                    </div>

                    <div class="d-flex justify-content-center">
                      <button
                        type="submit"
                        class="btn btn-success btn-block btn-lg gradient-custom-4 text-body"
                      >Submit</button>
                    </div>

                  </form>
                  
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="modal fade" id="exampleModal" style="margin-top: 150px ;" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
                      aria-hidden="true">
                      <div class="modal-dialog modal-xl" style="max-width: 90% !important; height: 90px !important; " role="document">
                          <div class="modal-content">
                              <div class="modal-header">
                                  <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                                  <div class="modal-header border-bottom-0">
                                      <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close"></button>
                                  </div>
                              </div>
                              <div class="modal-body">
                                  <div class="form-group row" id="test">
                                  </div>
                              </div>
                              <div class="modal-header text-center">
                                  <button class="btn btn-success" type="button" data-dismiss="modal" aria-label="Close">Save
                                      Changes</button>
                              </div>
                          </div>
                     </div>
    </section>
    <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>

    <script>
    const input = document.getElementById('id_image')
    const test = document.getElementById('test')
    input.addEventListener('change', () => {
        // Getting image file object from the input variable
        const img_data = []
        const imagebox = []
        const crop_btn = []
        const confirm_btn = []
        const url = []
        const length = input.files.length
        for (i = 0; i < length; i++) {
            test.innerHTML += `<div class="col-4"><div id="image-box${i}" class="image-container" style="height: 350px; width: 350px;"> </div>
    <button class="btn btn-outline-info" id="crop-btn${i}" style="width: 100%; margin-top: 10px; display: block;" type="button">Crop</button> </div>`
        }
        for (i = 0; i < length; i++) {
            img_data[i] = input.files[i]
        }

        img_data.forEach((image_data, i) => {
            url[i] = URL.createObjectURL(image_data)
        })
        // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
        // The new object URL represents the specified File object or Blob object.
        url.forEach((url, i) => {
            document.getElementById('image-box' + i).innerHTML = `<img src="${url}" id="image${i}" style="width:100%;">`
        })

        // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.

        // Storing that cropping view image in a variable


        // Displaying the image box
        for (i = 0; i < length; i++) {
            document.getElementById('image-box' + i).style.display = 'block'
            document.getElementById('crop-btn' + i).style.display = 'block'
        }


        for (i = 0; i < length; i++) {
            cropper(img_data[i], document.getElementById('image' + i), i, document.getElementById('crop-btn' + i), document.getElementById('image-box' + i))
        }



        // Creating a croper object with the cropping view image
        // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
        // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
        let container = new DataTransfer();
        let fileInputElement = document.getElementById('id_image');



        function cropper(img_data, image, index, crop_btn, imagebox) {

            const cropper = new Cropper(image, {
                autoCropArea: 1,
                viewMode: 1,
                scalable: false,
                zoomable: false,
                movable: false,
                minCropBoxWidth: 50,
                minCropBoxHeight: 50,
            })

            // When crop button is clicked this event will get triggered
            crop_btn.addEventListener('click', () => {
                // This method coverts the selected cropped image on the cropper canvas into a blob object
                cropper.getCroppedCanvas().toBlob((blob) => {

                    // Gets the original image data
                    // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
                    let file = new File([blob], img_data.name, { type: "image/*", lastModified: new Date().getTime() });
                    // Create a new container

                    // Add the cropped image file to the container
                    container.items.add(file);

                    fileInputElement.files = container.files

                    // Replace the original image file with the new cropped image file



                    // Hide the cropper box
                    imagebox.style.display = 'none'
                    // Hide the crop button
                    crop_btn.style.display = 'none'
                });
            });
        }
    });
</script>

    <script>
      $(document).ready(function() { let imagesPreview = function(input,
      placeToInsertImagePreview) { if (input.files) { let filesAmount =
      input.files.length; for (i = 0; i < filesAmount; i++) { let reader = new
      FileReader(); reader.onload = function(event) { $($.parseHTML("<img>"))
      .attr("src", event.target.result) .appendTo(placeToInsertImagePreview); };
      reader.readAsDataURL(input.files[i]); } } };
      $("#input-multi-files").on("change", function() { imagesPreview(this,
      "div.preview-images"); }); });
    </script>
    <script defer src="https://cdn.crop.guide/loader/l.js?c=YWPYGS"></script>
  </body>
</html>